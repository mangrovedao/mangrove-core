// SPDX-License-Identifier: Unlicense
// This file was manually adapted from a file generated by abi-to-sol. It must
// be kept up-to-date with the actual Mangrove interface. Fully automatic
// generation is not yet possible due to user-generated types in the external
// interface lost in the abi generation.

pragma solidity >=0.7.0 <0.9.0;

pragma experimental ABIEncoderV2;

import {MgvLib, MgvStructs, IMaker, OL} from "./MgvLib.sol";
import "./MgvLib.sol" as MgvLibWrapper;

interface IMangrove {
  event Approval(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    address owner,
    address spender,
    uint value
  );
  event Credit(address indexed maker, uint amount);
  event Debit(address indexed maker, uint amount);
  event Kill();
  event NewMgv();
  event OfferFail(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    uint id,
    address taker,
    uint takerWants,
    uint takerGives,
    bytes32 mgvData
  );
  event OfferRetract(
    address indexed outbound_tkn, address indexed inbound_tkn, uint indexed tickScale, uint id, bool deprovision
  );
  event OfferSuccess(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    uint id,
    address taker,
    uint takerWants,
    uint takerGives
  );
  event OfferWrite(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    address maker,
    int logPrice,
    uint gives,
    uint gasprice,
    uint gasreq,
    uint id
  );
  event OrderComplete(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    address taker,
    uint takerGot,
    uint takerGave,
    uint penalty,
    uint feePaid
  );
  event OrderStart();
  event PosthookFail(
    address indexed outbound_tkn,
    address indexed inbound_tkn,
    uint indexed tickScale,
    uint offerId,
    bytes32 posthookData
  );
  event SetActive(address indexed outbound_tkn, address indexed inbound_tkn, uint indexed tickScale, bool value);
  event SetDensityFixed(address indexed outbound_tkn, address indexed inbound_tkn, uint indexed tickScale, uint value);
  event SetFee(address indexed outbound_tkn, address indexed inbound_tkn, uint indexed tickScale, uint value);
  event SetGasbase(
    address indexed outbound_tkn, address indexed inbound_tkn, uint indexed tickScale, uint offer_gasbase
  );
  event SetGasmax(uint value);
  event SetGasprice(uint value);
  event SetGovernance(address value);
  event SetMonitor(address value);
  event SetNotify(bool value);
  event SetUseOracle(bool value);

  function DOMAIN_SEPARATOR() external view returns (bytes32);

  function PERMIT_TYPEHASH() external view returns (bytes32);

  function withdrawERC20(address tokenAddress, uint value) external;
  function activate(
    OL memory ol,
    uint fee,
    uint density,
    uint offer_gasbase
  ) external;

  function allowances(address, address, address, address) external view returns (uint);

  function approve(address outbound_tkn, address inbound_tkn, address spender, uint value) external returns (bool);

  function balanceOf(address) external view returns (uint);

  function best(OL memory ol) external view returns (uint);

  function config(OL memory ol)
    external
    view
    returns (MgvStructs.GlobalPacked, MgvStructs.LocalPacked);

  function configInfo(OL memory ol)
    external
    view
    returns (MgvStructs.GlobalUnpacked memory global, MgvStructs.LocalUnpacked memory local);

  function deactivate(OL memory ol) external;

  function flashloan(MgvLib.SingleOrder memory sor, address taker) external returns (uint gasused, bytes32 makerData);

  function fund(address maker) external payable;

  function fund() external payable;

  function governance() external view returns (address);

  function isLive(MgvStructs.OfferPacked offer) external pure returns (bool);

  function kill() external;

  function locked(OL memory ol) external view returns (bool);

  function marketOrderByVolume(
    OL memory ol,
    uint takerWants,
    uint takerGives,
    bool fillWants
  ) external returns (uint takerGot, uint takerGave, uint bounty, uint fee);

  function marketOrderByPrice(
    OL memory ol,
    uint maxPrice,
    uint fillVolume,
    bool fillWants
  ) external returns (uint, uint, uint, uint);

  function marketOrderByLogPrice(
    OL memory ol,
    int maxPrice_e18,
    uint fillVolume,
    bool fillWants
  ) external returns (uint, uint, uint, uint);

  function marketOrderForByVolume(
    OL memory ol,
    uint takerWants,
    uint takerGives,
    bool fillWants,
    address taker
  ) external returns (uint takerGot, uint takerGave, uint bounty, uint feePaid);

  function marketOrderForByPrice(
    OL memory ol,
    uint maxPrice_e18,
    uint fillVolume,
    bool fillWants,
    address taker
  ) external returns (uint takerGot, uint takerGave, uint bounty, uint feePaid);

  function marketOrderForByLogPrice(
    OL memory ol,
    int logPrice,
    uint fillVolume,
    bool fillWants,
    address taker
  ) external returns (uint takerGot, uint takerGave, uint bounty, uint feePaid);

  function newOfferByVolume(
    OL memory ol,
    uint wants,
    uint gives,
    uint gasreq,
    uint gasprice
  ) external payable returns (uint);

  function newOfferByLogPrice(
    OL memory ol,
    int logPrice,
    uint gives,
    uint gasreq,
    uint gasprice
  ) external payable returns (uint);

  function nonces(address) external view returns (uint);

  function offerDetails(OL memory ol, uint) external view returns (MgvStructs.OfferDetailPacked);

  function offerInfo(OL memory ol, uint offerId)
    external
    view
    returns (MgvStructs.OfferUnpacked memory offer, MgvStructs.OfferDetailUnpacked memory offerDetail);

  function offers(OL memory ol, uint) external view returns (MgvStructs.OfferPacked);

  function permit(
    address outbound_tkn,
    address inbound_tkn,
    address owner,
    address spender,
    uint value,
    uint deadline,
    uint8 v,
    bytes32 r,
    bytes32 s
  ) external;

  function retractOffer(OL memory ol, uint offerId, bool deprovision)
    external
    returns (uint provision);

  function setDensityFixed(OL memory ol, uint densityFixed) external;

  function setDensity(OL memory ol, uint density) external;

  function setFee(OL memory ol, uint fee) external;

  function setGasbase(OL memory ol, uint offer_gasbase) external;

  function setGasmax(uint gasmax) external;

  function setGasprice(uint gasprice) external;

  function setGovernance(address governanceAddress) external;

  function setMonitor(address monitor) external;

  function setNotify(bool notify) external;

  function setUseOracle(bool useOracle) external;

  function snipes(OL memory ol, uint[4][] memory targets, bool fillWants)
    external
    returns (uint successes, uint takerGot, uint takerGave, uint bounty, uint fee);

  function snipesFor(
    OL memory ol,
    uint[4][] memory targets,
    bool fillWants,
    address taker
  ) external returns (uint successes, uint takerGot, uint takerGave, uint bounty, uint fee);

  function updateOfferByVolume(
    OL memory ol,
    uint wants,
    uint gives,
    uint gasreq,
    uint gasprice,
    uint offerId
  ) external payable;

  function updateOfferByLogPrice(
    OL memory ol,
    int logPrice,
    uint gives,
    uint gasreq,
    uint gasprice,
    uint offerId
  ) external payable;

  function withdraw(uint amount) external returns (bool noRevert);

  receive() external payable;

  function leafs(OL memory ol, int index)
    external
    view
    returns (MgvLibWrapper.Leaf);

  function level0(OL memory ol, int index)
    external
    view
    returns (MgvLibWrapper.Field);

  function level1(OL memory ol, int index)
    external
    view
    returns (MgvLibWrapper.Field);

  function level2(OL memory ol) external view returns (MgvLibWrapper.Field);
}

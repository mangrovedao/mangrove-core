# Audit trail

The following changes have been introduced along with smaller refactoring and comments:
* IOfferLogic, MangroveOffer and downstream contracts have had the reserve concept simplified
* IOfferLogic, Forwarder's retractOffer has been made internal and explicitly exposed on MangroveOrder
* TransferLib has new functions for transferring multiple tokens in one go
* Direct is used by the Kandel strat.

The Kandel strat itself introduces the following building blocks:
* Kandel: The direct Kandel contract without a router which utilizes the other building blocks.
* AaveKandel: The AavePooledRouter version of the Kandel contract
* KandelSeeder: A contract to do permissionless deploy the Kandel and AaveKandel contracts and bind to a shared router
* AbstractKandel: Core abstract functions offered by Kandel strats
* GeometricKandel: Implements the geometric price progression used in the Kandel strat without storing the actual prices
* CoreKandel: Implements the core of the Kandel strat which updates a dual offer whenever an offer is taken, but is agnostic to the actual price distribution.
* TradesBaseQuotePair: Implements helper functions for trading a base, quote pair of tokens using bid and ask terminology.
* HasIndexedBidsAndAsks: Implements the ability to have a [0..length] indexed set of offers on Mangrove for both bids and asks
* DirectWithBidsAndAskDistribution: Adorns the Direct strat with indexed bids and asks and allows the offers to be populated according to a given base and quote distribution.
* AavePooledRouter: a new type of router able to deposit and withdraw funds on AAVE v3.
* AaveV3Lender: a module that implements AAVE v3 interaction capacities.


## changes to already audited code

### src/strategies/MangroveOffer.sol (Minor)
* cosmetic changes of variables and constant names
* `logRepostStatus` is called at the end of `__posthookSuccess__` in order to log unexpected failure to repost
* `__reserve__` hook was removed (no clear use case and potentially bug prone). As a consequence offer owner in Forwarder strats (such as MangroveOrder) no longer have strat ready remapping of their address. Direct strats use a different scheme (reserve id).
* `checkList` is no longer calling router's checklist. This will is done in the ad hoc hooks in Direct and Forwarder.
* `withdrawFromMangrove` is made public to allow offer logic to withdraw funds if needed

### src/strategies/MangroveOrder.sol (Minor)
* A public implementation of `_retractOffer` is now provided (see changes in IOfferLogic and Forwarder)
* Since the `__reserve__` hook was removed, references to `reserve(msg.sender)` have been replaced by `msg.sender`
* We adapted the call to `_newOffer` in order to ignore the returned `bytes32`. 

### src/strategies/interfaces/IOfferLogic.sol (Minor)
* `retractOffer` is no longer a public function required by the IOfferLogic interface. Internal `_retractOffer` is provided both for `Forwarder` and `Direct` strats and needs to be exposed (see `MangroveOrder` changes).

### src/strategies/offer_forwarder/Forwarder.sol (Minor)
* `_newOffer`'s computation of new gasprice is factored out for clarity in `deriveAndCheckGasprice`. The computation is unchanged. Function now returns both the `offerId` assigned by Mangrove to the new offer and a byte32 which is non empty when Mangrove reverted with a reason, and `noRevert` argument was set to `true`.
* giving `max(uint).type` in the `gasreq` argument of both `_updateOffer` and `_newOffer` is no longer interpreted as requiring `offerGasreq()`. 
* `retractOffer` is no longer a public function of Forwarder. An internal  `_retractOffer` is provided for Forwarder starts (in accordance to the IOfferLogic interface change above).
* Offer owner can no longer be mapped to another address via the `__reserve__` hook that has disappeard (see `MangroveOffer` change). It has no impact on `MangroveOrder` which was not using this hook.

### src/strategies/routers/AbstractRouter.sol (Minor)
* Cosmetic changes in naming
* router's checklist has been simplified and can be called from an arbitrary address
* `balanceOfReserve` is now a required function for all implementation of AbstractRouter



